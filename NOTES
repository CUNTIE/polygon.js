  while resultingTris.length < coords.length - 2

    if ears.length is 0
      console.info 'the universe has imploded'
      return triangles

    # Remove the index from the ear list and push on a new triangle
    ncurr = ears.pop()
    rcurr = polygon.indexOf ncurr
    rprev = (rcurr + polygon.length - 1) % polygon.length
    rnext = (rcurr + 1) % polygon.length
    nprev = polygon[rprev]
    nnext = polygon[rnext]
    resultingTris.push [nprev, ncurr, nnext]

    # Remove the index from the remaining polygon.
    polygon.splice rcurr, 1

    for adj in [nprev, nnext]
      if (reflexMap[adj] >= 0) and (not isTrimmedReflexIndex adj, coords, polygon)
        reflex.splice reflexMap[adj], 1
        reflexMap[adj] = -1 # ---------------------------------------------------- hmm
      if reflexMap[adj] < 0
        nprev = (ncurr + coords.length - 1) % coords.length
        nnext = (ncurr + 1) % coords.length
        triangle = [nprev, ncurr, nnext]
        tricoords = (coords[i] for i in triangle)
        isEar = true
        for oindex in reflex
          continue if oindex in triangle
          ocoord = coords[oindex]
          if pointInTri ocoord, tricoords
            isEar = false
            break
        wasEar = ncurr in ears
        if isEar and not wasEar # ---------------------------------------- slow
          ears.push ncurr
        else if not isEar and wasEar
          ears.splice (ears.indexOf ncurr), 1
